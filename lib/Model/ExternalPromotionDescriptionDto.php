<?php
/**
 * ExternalPromotionDescriptionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Baluwo External API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ExternalPromotionDescriptionDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExternalPromotionDescriptionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExternalPromotionDescriptionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'provider_code' => 'string',
        'start_utc' => '\DateTime',
        'end_utc' => '\DateTime',
        'currency_iso' => 'string',
        'minimum_send_amount' => 'double',
        'dates' => '\DateTime[]',
        'headline' => 'string',
        'terms_and_conditions' => 'string',
        'bonus_validity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'provider_code' => null,
        'start_utc' => 'date-time',
        'end_utc' => 'date-time',
        'currency_iso' => null,
        'minimum_send_amount' => 'double',
        'dates' => 'date-time',
        'headline' => null,
        'terms_and_conditions' => null,
        'bonus_validity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provider_code' => 'providerCode',
        'start_utc' => 'startUtc',
        'end_utc' => 'endUtc',
        'currency_iso' => 'currencyIso',
        'minimum_send_amount' => 'minimumSendAmount',
        'dates' => 'dates',
        'headline' => 'headline',
        'terms_and_conditions' => 'termsAndConditions',
        'bonus_validity' => 'bonusValidity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provider_code' => 'setProviderCode',
        'start_utc' => 'setStartUtc',
        'end_utc' => 'setEndUtc',
        'currency_iso' => 'setCurrencyIso',
        'minimum_send_amount' => 'setMinimumSendAmount',
        'dates' => 'setDates',
        'headline' => 'setHeadline',
        'terms_and_conditions' => 'setTermsAndConditions',
        'bonus_validity' => 'setBonusValidity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provider_code' => 'getProviderCode',
        'start_utc' => 'getStartUtc',
        'end_utc' => 'getEndUtc',
        'currency_iso' => 'getCurrencyIso',
        'minimum_send_amount' => 'getMinimumSendAmount',
        'dates' => 'getDates',
        'headline' => 'getHeadline',
        'terms_and_conditions' => 'getTermsAndConditions',
        'bonus_validity' => 'getBonusValidity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['start_utc'] = isset($data['start_utc']) ? $data['start_utc'] : null;
        $this->container['end_utc'] = isset($data['end_utc']) ? $data['end_utc'] : null;
        $this->container['currency_iso'] = isset($data['currency_iso']) ? $data['currency_iso'] : null;
        $this->container['minimum_send_amount'] = isset($data['minimum_send_amount']) ? $data['minimum_send_amount'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['terms_and_conditions'] = isset($data['terms_and_conditions']) ? $data['terms_and_conditions'] : null;
        $this->container['bonus_validity'] = isset($data['bonus_validity']) ? $data['bonus_validity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code provider_code
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets start_utc
     *
     * @return \DateTime
     */
    public function getStartUtc()
    {
        return $this->container['start_utc'];
    }

    /**
     * Sets start_utc
     *
     * @param \DateTime $start_utc start_utc
     *
     * @return $this
     */
    public function setStartUtc($start_utc)
    {
        $this->container['start_utc'] = $start_utc;

        return $this;
    }

    /**
     * Gets end_utc
     *
     * @return \DateTime
     */
    public function getEndUtc()
    {
        return $this->container['end_utc'];
    }

    /**
     * Sets end_utc
     *
     * @param \DateTime $end_utc end_utc
     *
     * @return $this
     */
    public function setEndUtc($end_utc)
    {
        $this->container['end_utc'] = $end_utc;

        return $this;
    }

    /**
     * Gets currency_iso
     *
     * @return string
     */
    public function getCurrencyIso()
    {
        return $this->container['currency_iso'];
    }

    /**
     * Sets currency_iso
     *
     * @param string $currency_iso currency_iso
     *
     * @return $this
     */
    public function setCurrencyIso($currency_iso)
    {
        $this->container['currency_iso'] = $currency_iso;

        return $this;
    }

    /**
     * Gets minimum_send_amount
     *
     * @return double
     */
    public function getMinimumSendAmount()
    {
        return $this->container['minimum_send_amount'];
    }

    /**
     * Sets minimum_send_amount
     *
     * @param double $minimum_send_amount minimum_send_amount
     *
     * @return $this
     */
    public function setMinimumSendAmount($minimum_send_amount)
    {
        $this->container['minimum_send_amount'] = $minimum_send_amount;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \DateTime[]
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \DateTime[] $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param string $headline headline
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string $terms_and_conditions terms_and_conditions
     *
     * @return $this
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets bonus_validity
     *
     * @return string
     */
    public function getBonusValidity()
    {
        return $this->container['bonus_validity'];
    }

    /**
     * Sets bonus_validity
     *
     * @param string $bonus_validity bonus_validity
     *
     * @return $this
     */
    public function setBonusValidity($bonus_validity)
    {
        $this->container['bonus_validity'] = $bonus_validity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


